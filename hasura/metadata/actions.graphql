type Mutation {
  attachPermissionToRole(
    permissionKey: String!
    roleKey: String!
  ): response
}

type Mutation {
  attachRoleToUser(
    roleKey: String!
    userID: uuid!
  ): response
}

type Mutation {
  deletePermission(
    permissionName: String!
  ): response
}

type Mutation {
  deleteRole(
    roleName: String!
  ): response
}

type Mutation {
  detachPermissionToRole(
    permissionKey: String!
    roleKey: String!
  ): response
}

type Mutation {
  detachRoleToUser(
    roleKey: String!
    userID: uuid!
  ): response
}

type Query {
  getPermissions: listResponse
}

type Query {
  getRoles: listResponse
}

type Mutation {
  insertPermission(
    permissionName: String!
  ): response
}

type Mutation {
  insertRole(
    roleName: String!
  ): response
}

type Query {
  signin(
    email: String!
    password: String!
  ): signinOutput
}

type Mutation {
  signup(
    name: String!
    email: String!
    password: String!
  ): signupOutput
}

input signinInput {
  email: String!
  password: String!
}

input SampleInput {
  username: String!
  password: String!
}

type usersList {
  id: String
  name: String
  email: String
}

type signupOutput {
  success: Boolean!
  message: String!
  data: authResponse
}

type token {
  token: String!
}

type singinOutput {
  success: Boolean!
  message: String!
  data: authResponse
}

type response {
  success: Boolean!
  message: String!
}

type authResponse {
  id: String!
  name: String!
  email: String!
  roles: [String]
  token: String!
}

type signinOutput {
  success: Boolean!
  message: String!
  data: authResponse
}

type SampleOutput {
  accessToken: String!
}

type listResponse {
  success: Boolean!
  message: String!
  data: [lists]
}

type lists {
  key: String!
  created_at: String!
  updated_at: String!
}

